---
import { coraLleno, coraVacio } from "@/components/images/images";
import { getFavoritesByUserId, getFavoritesCountGrouped } from "@/repository/favourites";
import { listRestaurants } from "@/repository/restaurants";

const { user } = Astro.props;

const allRestaurants = await listRestaurants();
const favorites = await getFavoritesByUserId(user.id);
const favRestaurants = allRestaurants.filter(r => favorites.includes(r.id));
// Obtener los favoritos de cada restaurante
const favoritesCountByRestaurant = await getFavoritesCountGrouped();
---
{favRestaurants.map(restaurant => (
  <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
    <a href={`/user/restaurant/${restaurant.id}`}>
      <div class="h-56 w-full">
        {restaurant.photo && (
          <img 
            src={restaurant.photo} 
            alt="restaurante" 
            class="mx-auto h-full rounded-lg"
          />
        )}
      </div>
      <div class="pt-6">  
        <a href={`/user/restaurant/${restaurant.id}`} class="text-lg font-semibold leading-tight text-gray-900 hover:underline">{restaurant.name}</a>
        <div class="mt-2 flex items-center gap-2">
        
        </div>
        <ul class="mt-2 flex items-center gap-4">
          <li class="flex items-center gap-2">
            <svg class="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
            </svg>
            <p class="text-sm font-medium text-gray-500">{restaurant.address}</p>
          </li>
        </ul>

        <div class="mt-4 flex items-center justify-between gap-4">
          <p class="text-sm text-gray-500 mt-1">{favoritesCountByRestaurant[restaurant.id] ?? 0} saved</p>
          <button aria-label="AÃ±adir a favoritos"
            class="transition transform duration-200 hover:scale-110 ml-3 text-slate-400 hover:text-pink-500"
            data-fav
            data-user-id={user.id}
            data-restaurant-id={restaurant.id}
            data-cora-lleno={coraLleno}
            data-cora-vacio={coraVacio}>
            <span set:html={coraLleno}></span>
          </button>
        </div>
      </div>
    </a>
  </div>
))}

<script type="module">
  document.addEventListener("click", async (e) => {
    const button = e.target.closest("button[data-fav]");
    if (!button) return;

    const restaurantId = button.dataset.restaurantId;
    const userId = button.dataset.userId;
    const coraLleno = button.dataset.coraLleno;
    const coraVacio = button.dataset.coraVacio;
    const heartSpan = button.querySelector("span");

    const form = new FormData();
    form.append("userId", userId);
    form.append("restaurantId", restaurantId);

    try {
      const res = await fetch("/api/favorites/toggle", {
        method: "POST",
        body: form,
      });

      const result = await res.json();
      heartSpan.innerHTML = result.added ? coraLleno : coraVacio;
    } catch (err) {
      console.error("Error al actualizar favorito:", err);
    }
  });
</script>
